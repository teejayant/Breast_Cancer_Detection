import streamlit as st
import joblib

# Load the trained model and scaler
model = joblib.load("model.pkl")
scaler = joblib.load("scaler.pkl")
selected_features = joblib.load("selected_features.pkl")

# st.title("Breast Cancer Prediction")
st.markdown(
    "<h1 style='text-align: center;'>Breast Cancer Prediction</h1>",
    unsafe_allow_html=True
)
st.image("img.png", use_container_width =True, width=80)  # Make sure this image exists in your project folder




# Dynamically create input fields based on selected features
user_input = []
for feature in selected_features:
    value = st.number_input(feature.replace("_", " ").title(), min_value=0.0, step=0.01)
    user_input.append(value)





if st.button("Predict"):
   
    input_data = [user_input]

    try:
        # Scale input
        scaled_input = scaler.transform(input_data)
        prediction = model.predict(scaled_input)[0]
        proba = model.predict_proba(scaled_input)[0]

        # Display result
        if prediction == 0:
            st.success("‚úÖ Prediction: Benign")
        else:
            st.error("‚ö†Ô∏è Prediction: Malignant")

        # Confidence levels
        benign_percent = proba[0] * 100
        malignant_percent = proba[1] * 100
        confidence = proba[prediction] * 100

        # Display prediction probabilities
        st.subheader("üìä Prediction Confidence")
        st.write(f"üü¢ **Benign**: `{benign_percent:.2f}%`")
        st.write(f"üî¥ **Malignant**: `{malignant_percent:.2f}%`")

        # Visual confidence bar
        st.progress(int(confidence))  # progress bar up to 100%

        # Advice and confidence interpretation
        st.subheader("ü©∫ Confidence Level & Advice")
        if confidence > 85:
            level = "High"
            advice = "The model is highly confident in this result. This can provide initial reassurance but still should not replace medical consultation."
        elif confidence > 60:
            level = "Moderate"
            advice = "The model has moderate confidence. Consider using this result as a preliminary indication and follow up with medical testing."
        else:
            level = "Low"
            advice = "The model is uncertain. It's strongly recommended to consult a medical professional for accurate diagnosis."

        st.markdown(f"**Confidence Level:** `{level}` ({confidence:.2f}%)")
        st.info(advice)

        # Optional gauge using st.metric (a simple numerical UI element)
        # st.metric(label="Model Confidence (%)", value=f"{confidence:.2f}")

        # Disclaimer
        st.markdown("---")
        st.warning("‚ö†Ô∏è **Disclaimer:** This prediction is generated by a machine learning model trained on historical data. It is **not a substitute** for professional medical diagnosis. Always consult a qualified healthcare provider for health-related decisions.")
        
    except Exception as e:
        st.error(f"An error occurred during prediction: {e}")

#run in terminal: streamlit run main.py
# to stop: ctrl + c
